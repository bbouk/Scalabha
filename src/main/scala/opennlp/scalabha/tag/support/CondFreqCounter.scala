package opennlp.scalabha.tag.support

import opennlp.scalabha.util.CollectionUtils._
import opennlp.scalabha.util.Pattern
import opennlp.scalabha.util.Probability
import opennlp.scalabha.util.Probability._
import org.apache.commons.logging.LogFactory

/**
 * A builder for conditional frequency distributions.  Stores counts (in a mutable
 * fashion) and allows counts to be added.  A distribution based on the
 * counts is generated by calling 'toFreqDist'.
 *
 * This is the top of a hierarchy designed for a modular approach to
 * frequency distribution building.  SimpleCondFreqCounter serves as the basic
 * form of the counter; it stores and increments the actual counts.  Other
 * implementations of CondFreqCounter will be count-transforming decorators
 * extending DelegatingCondFreqCounter that wrap SimpleCondFreqCounter or wrap
 * wrappers thereof.  Multiple layers of decoration allow various
 * transformations to be applied to the counts, and in varying orders.
 *
 * The operation of the system is such that counts, when added via the
 * top-most layer are passed, untouched, all the way to the base where they
 * are stored.  When toFreqDist is called, the counts are gathered via
 * recursive calls to resultCounts that travel down the layers to the bottom,
 * where the true counts are retrieved.  Each layer, starting from the bottom,
 * then applies its transformation and returns the modified counts to be
 * received by the higher layers.  Once the (modified) counts reach the top,
 * they are used to calculate the distribution.
 *
 * For example, the following code will create a CondFreqCounter that, before
 * creating a distribution, will constrain its counts to those in validEntries
 * and then smooth the constrained counts:
 * {{{
 *   new SimpleSmoothingCondFreqCounter(lambda,
 *     new ConstrainingCondFreqCounter(validEntries, strict,
 *       new SimpleCondFreqCounter()))
 * {{{
 *
 * Implementing classes should define:
 * <ul>
 *   <li> increment: Add to counts. Should simply forward to delegate.
 *   <li> resultCounts: Apply transformation to delegate's resultCounts.
 * </ul>
 *
 * @tparam A	the conditioning item being counted; P(B|A).
 * @tparam B	the conditioned item being counted; P(B|A).
 */
abstract class CondFreqCounter[A, B] {
  def increment(a: A, b: B, n: Double)
  def resultCounts(): DefaultedCondFreqCounts[A, B, Double]

  final def ++=[N](other: CondFreqCounts[A, B, N])(implicit num: Numeric[N]): CondFreqCounter[A, B] = { other.iterator.foreach { case (a, bs) => bs.iterator.foreach { case (b, n) => increment(a, b, num.toDouble(n)) } }; this }
  final def ++=(other: CondFreqCounter[A, B]): CondFreqCounter[A, B] = this ++= new CondFreqCounts(other.resultCounts.counts.mapValuesStrict(_.counts))
  final def ++=(other: TraversableOnce[(B, A)]): CondFreqCounter[A, B] = this ++= new CondFreqCounts(other.toIterator.map(_.swap).groupByKey.mapValuesStrict(m => FreqCounts(m.counts.mapValuesStrict(_.toDouble))))

  final def toFreqDist: A => B => Probability = {
    CondFreqDist(resultCounts())
  }
}

//////////////////////////////////////
// Base Implementation
//////////////////////////////////////

/**
 * The base CondFreqCounter implementation that directly stores and updates a
 * (mutable) map of counts.
 */
class SimpleCondFreqCounter[A, B] extends CondFreqCounter[A, B] {
  private val storedCounts = collection.mutable.Map[A, FreqCounter[B]]()
  override def increment(a: A, b: B, n: Double) { storedCounts.getOrElseUpdate(a, new SimpleFreqCounter[B]).increment(b, n) }
  override def resultCounts() = DefaultedCondFreqCounts(storedCounts.toMap.mapValuesStrict(_.resultCounts), 0, 0)
  override def toString = storedCounts.mapValues(_.toString).toString
}

//////////////////////////////////////
// Delegating Implementation
//////////////////////////////////////

/**
 * The base CondFreqCounter decorator.  It handles the counter incrementing,
 * so subclasses need only implement resultCounts.
 *
 * @param delegate	the delegate counter upon which the transformation is performed
 */
abstract class DelegatingCondFreqCounter[A, B](delegate: CondFreqCounter[A, B]) extends CondFreqCounter[A, B] {
  final override def increment(a: A, b: B, n: Double) { delegate.increment(a, b, n) }
}

//////////////////////////////////////
// Constraining Implementation
//////////////////////////////////////

/**
 * CondFreqCounter decorator that zero out counts for entries not found in
 * validEntries.
 *
 * @param validEntries	zero out entries not found in this set
 * @param strict	if true, default information will be zeroed as well
 * @param delegate	the delegate counter upon which the transformation is performed
 */
class ConstrainingCondFreqCounter[A, B](validBigrams: Map[A, Set[B]], strict: Boolean, delegate: CondFreqCounter[A, B]) extends DelegatingCondFreqCounter[A, B](delegate) {
  override def resultCounts() = {
    val DefaultedCondFreqCounts(delegateResultCounts, delegateTotalAddition, delegateDefaultCount) = delegate.resultCounts
    val filteredResultCounts =
      for ((a, DefaultedFreqCounts(aCounts, aTotalAdd, aDefault)) <- delegateResultCounts) yield {
        val filtered = FreqCounts(validBigrams.get(a).map(aCounts.toMap.filterKeys).getOrElse(Map()))
        val totalAdd = if (strict) 0 else aTotalAdd
        val default = if (strict) 0 else aDefault
        (a, DefaultedFreqCounts(filtered, totalAdd, default))
      }
    val totalAddition = if (strict) 0 else delegateTotalAddition
    val defaultCount = if (strict) 0 else delegateDefaultCount
    DefaultedCondFreqCounts(filteredResultCounts, totalAddition, defaultCount)
  }
}

object ConstrainingCondFreqCounter {
  def apply[A, B](validEntries: Map[A, Set[B]], strict: Boolean, delegate: CondFreqCounter[A, B]) =
    new ConstrainingCondFreqCounter(validEntries, strict, delegate)

  def apply[A, B](validEntries: Option[Map[A, Set[B]]], strict: Boolean, delegate: CondFreqCounter[A, B]) =
    validEntries match {
      case Some(validEntries) => new ConstrainingCondFreqCounter(validEntries, strict, delegate)
      case None => delegate
    }
}

//////////////////////////////////////
// Scaling Implementation
//////////////////////////////////////

/**
 * CondFreqCounter decorator that multiplies every count by some lambda
 *
 * @param lambda	the amount to scale each count
 * @param delegate	the delegate counter upon which the transformation is performed
 */
class ScalingCondFreqCounter[A, B](lambda: Double, delegate: CondFreqCounter[A, B]) extends DelegatingCondFreqCounter[A, B](delegate) {
  override def resultCounts() = {
    val DefaultedCondFreqCounts(delegateResultCounts, delegateTotalAddition, delegateDefaultCount) = delegate.resultCounts
    val filteredResultCounts =
      for ((a, DefaultedFreqCounts(aCounts, aTotalAdd, aDefault)) <- delegateResultCounts) yield {
        val scaled = FreqCounts(aCounts.toMap.mapValuesStrict(_ * lambda))
        (a, DefaultedFreqCounts(scaled, aTotalAdd * lambda, aDefault * lambda))
      }
    DefaultedCondFreqCounts(filteredResultCounts, delegateTotalAddition * lambda, delegateDefaultCount * lambda)
  }
}

//////////////////////////////////////
// Smoothing Implementation
//////////////////////////////////////

/**
 * CondFreqCounter decorator that smoothes counts.
 *
 * This class applies a very simple add-one smoothing procedure to the counts.
 *
 * @param lambda			smoothing parameter
 * @param countsForBackoff	counts to be used to compute backoff information
 */
class SimpleSmoothingCondFreqCounter[A, B](lambda: Double, countsForBackoff: CondFreqCounts[A, B, Int], delegate: CondFreqCounter[A, B]) extends DelegatingCondFreqCounter[A, B](delegate) {
  private val LOG = LogFactory.getLog("opennlp.scalabha.tag.support.SimpleSmoothingCondFreqCounter")

  protected def getDelegateResultCounts() = delegate.resultCounts

  override def resultCounts() = {
    val delegateResultCounts = getDelegateResultCounts()
    val DefaultedCondFreqCounts(_, delegateTotalAddition, delegateDefaultCount) = delegateResultCounts

    val numSingleCountItems = countsForBackoff.toMap.mapValuesStrict(_.count(_._2 == 1)).withDefaultValue(0)

    // Compute MLE of B values alone (with add-one smoothing) for backoff
    val backoffCounts = amendBackoffCounts(countsForBackoff.map(_._2).foldLeft(FreqCounts[B, Int]())(_ ++ _)) // Sum Bs across all As
    val smoothedBackoffCounts = backoffCounts.toMap.mapValuesStrict(_.toDouble + 1) // add-one smoothing
    val smoothedBackoffTotal = 1.0 + smoothedBackoffCounts.values.sum // add-one smoothing
    val backoffDist = smoothedBackoffCounts.mapValuesStrict(_ / smoothedBackoffTotal) // P(B) = C(B) / Sum[C(x) for all x]
      .withDefaultValue(1.0 / smoothedBackoffTotal) // for "unseen" Bs, assume C(B) = 1

    val defaultedCountsForBackoff =
      DefaultedCondFreqCounts(countsForBackoff.toMap.mapValuesStrict(c =>
        DefaultedFreqCounts(c.mapValuesStrict(_.toDouble), 0.0, 0.0)), 0.0, 0.0)

    val smoothedResultCounts =
      (delegateResultCounts ++ defaultedCountsForBackoff).counts.map {
        case (a, DefaultedFreqCounts(aCounts, aTotalAdd, aDefault)) =>
          val smoothedLambda = lambda * (1 + numSingleCountItems(a))
          val smoothedBackoff = FreqCounts(backoffDist.mapValuesStrict(_ * smoothedLambda))
          val smoothedCounts = smoothedBackoff ++ aCounts
          val totalAddition = 0.0
          val defaultCount = smoothedLambda / smoothedBackoffTotal

          if (LOG.isDebugEnabled && Set("NN", "IN").contains(a.asInstanceOf[String])) {
            LOG.debug(a + ":")
            LOG.debug("    smoothedLambda = " + smoothedLambda)
            LOG.debug("    smoothedBackoff = " + smoothedBackoff.toMap.asInstanceOf[Map[String, String]].toList.sorted.take(15))
            LOG.debug("    smoothedCounts = " + smoothedCounts.toMap.asInstanceOf[Map[String, String]].toList.sorted.take(15))
            LOG.debug("    defaultCount = " + defaultCount)
          }

          (a, DefaultedFreqCounts(smoothedCounts, aTotalAdd + totalAddition, aDefault + defaultCount))
      }
    val totalAddition = 1.0
    val defaultCount = lambda / smoothedBackoffTotal
    DefaultedCondFreqCounts(smoothedResultCounts, totalAddition + delegateTotalAddition, defaultCount + delegateDefaultCount)
  }

  protected def amendBackoffCounts(backoffCounts: FreqCounts[B, Int]) = backoffCounts
}

//////////////////////////////////////
// Add-delta smoothing implementation
//////////////////////////////////////

class AddDeltaSmoothingCondFreqCounter[A, B](delta: Double, delegate: CondFreqCounter[A, B]) extends DelegatingCondFreqCounter[A, B](delegate) {
  override def resultCounts() = {
    val DefaultedCondFreqCounts(delegateResultCounts, delegateTotalAddition, delegateDefaultCount) = delegate.resultCounts
    DefaultedCondFreqCounts(
      delegateResultCounts.toMap
        .mapValuesStrict {
          case DefaultedFreqCounts(c, t, d) => DefaultedFreqCounts(c.toMap.mapValuesStrict(_ + delta), t + delta, d + delta)
        },
      delegateTotalAddition + delta, delegateDefaultCount + delta)
  }
}

//////////////////////////////////////
// Factory
//////////////////////////////////////

/**
 * A factory for FreqCounter objects.  Exists so that procedures requiring
 * FreqCounters can create new ones at will.
 *
 * {{{
 *   new CondFreqCounterFactory {
 *     def get() = SimpleCondFreqCounter()
 *   }
 * }}}
 */
abstract class CondFreqCounterFactory[A, B] {
  def get(): CondFreqCounter[A, B]
  def get[N: Numeric](initial: CondFreqCounts[A, B, N]): CondFreqCounter[A, B] = get() ++= initial
}
